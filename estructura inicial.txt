player001/
├── main.py          # Punto de entrada de la aplicación
├── gui.py           # Interfaz gráfica (por ejemplo, usando Tkinter o PyQt)
├── player.py        # Lógica de reproducción de audio (clase o funciones que controlan el audio)
├── playlist.py      # Gestión de listas: carga, manipulación y cálculo de duración total
├── info_api.py      # Módulo para acceder a información online (para etapas futuras)
└── utils.py         # Funciones auxiliares (formateo de tiempos, lectura de archivos de configuración, etc.)

main.py: Será el punto de inicio. Inicializará las instancias de cada componente (la interfaz, el reproductor y el manejador de listas) y orquestará su interrelación.

gui.py: Contendrá la clase (por ejemplo, RadioGUI) que creará la ventana principal, configurará botones, menús y mostrará la lista de reproducción. Podríamos utilizar Tkinter para empezar, que es sencillo y eficaz para prototipos.

player.py: Incluye la clase AudioPlayer con métodos para reproducir, pausar y detener el audio. Aquí se encapsula la lógica para la reproducción real, conectándola (más adelante) con la GUI.

playlist.py: Gestiona la lista de temas. Por ejemplo, con una clase PlaylistManager que cargue un archivo con la lista de canciones, permita editarla y calcule la duración total.

info_api.py: Será un módulo opcional en esta primera fase, reservado para más adelante cuando quieras integrar datos en línea (como información del autor, letras, etc.).

utils.py: Funciones comunes que puedan necesitarse en varios módulos, como formatear tiempos, validaciones, o lectura de archivos de configuración.